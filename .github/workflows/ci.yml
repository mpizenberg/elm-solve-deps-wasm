name: CI

on:
  pull_request:
  push:
    branches: [ master, main ]

jobs:
  build:
    name: Build the wasm package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Download cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/
            target/
          key: build-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            build-

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install wasm-opt
        run: |
          test -f ~/.cargo/bin/wasm-opt || (\
          version="version_104" \
          && curl -L -o binaryen.tar.gz https://github.com/WebAssembly/binaryen/releases/download/${version}/binaryen-${version}-x86_64-linux.tar.gz \
          && tar -xf binaryen.tar.gz \
          && mv binaryen-${version}/bin/wasm-opt ~/.cargo/bin/wasm-opt \
          )

      - name: Install wasm-snip
        run: test -f ~/.cargo/bin/wasm-snip || cargo install wasm-snip

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target wasm32-unknown-unknown

      - name: Compile with wasm-pack
        run: wasm-pack build --target nodejs

      - name: Shrink the wasm size
        run: |
          wasm-snip --snip-rust-panicking-code -p "core::fmt::float::<impl core::fmt::Display for f64>::fmt::.*" -o snipped.wasm pkg/elm_solve_deps_wasm_bg.wasm
          wasm-opt -Oz -o output.wasm snipped.wasm
          cp output.wasm pkg/elm_solve_deps_wasm_bg.wasm

      - name: Compress generated wasm package
        run: |
          mv pkg elm-solve-deps-wasm
          tar czf elm-solve-deps-wasm.tar.gz elm-solve-deps-wasm

      - uses: actions/upload-artifact@v2
        with:
          name: elm-solve-deps-wasm.tar.gz
          path: elm-solve-deps-wasm.tar.gz

  check_formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -D warnings
        with:
          command: clippy
