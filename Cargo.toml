[package]
name = "elm-solve-deps-wasm"
version = "1.0.2"
authors = ["Matthieu Pizenberg <matthieu.pizenberg@gmail.com>"]
edition = "2021"
description = "A dependency solver for the elm ecosystem"
repository = "https://github.com/mpizenberg/elm-solve-deps-wasm"
license = "MPL-2.0"
keywords = ["dependency", "pubgrub", "solver", "version", "elm"]
categories = ["algorithms"]
rust-version = "1.56.0"

[lib]
crate-type = ["cdylib", "rlib"]

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
# debug = true # for profiling with twiggy (also use wasm-opt -g)

[package.metadata.wasm-pack.profile.release]
# wasm-opt = ['-g', '-Oz']
wasm-opt = false

[dependencies]
wasm-bindgen = { version = "0.2.78", features = ["serde-serialize"] }
serde-wasm-bindgen = "0.3.1" # for easier conversion with JsValue
js-sys = "0.3.55"
log = { version = "0.4.14", default-features = false, features = ["std"] }
wee_alloc = "0.4.5"

# elm-solve-deps = { version = "0.1.1", path = "../elm-solve-deps/elm-solve-deps-lib" }
elm-solve-deps = { version = "0.1.1" }
pubgrub = { version = "0.2.1", features = ["serde"] }
serde_json = "1.0.72"
anyhow = "1.0.51"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }
